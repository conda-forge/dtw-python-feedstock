{% set name = "dtw-python" %}
{% set version = "1.1.7" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 15a4ba78119f30336e6d2fa93fbf98e64be41ca396342bbebfeee20871b5e259

build:
  number: 1
  script: {{ PYTHON }} -m pip install . --no-deps -vv
  skip: true  # [py<36 or python_impl == 'pypy']
  entry_points:
    - dtw = dtw.__main__:main

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('c') }}
    - numpy >=1.14
    - setuptools
  host:
    - python
    - pip
    - numpy >=1.14
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - scipy

test:
  imports:
    - dtw
  requires:
    - pytest
  source_files:
    - tests
  commands:
    - pytest tests
    - dtw --help

about:
  home: https://dynamictimewarping.github.io/
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: LICENSE
  summary: A comprehensive implementation of dynamic time warping (DTW) algorithms
        in Python.  DTW computes the optimal (least cumulative distance) alignment between
        points of two time series.  Common DTW variants covered include local (slope)
        and global (window) constraints, subsequence matches, arbitrary distance definitions,
        normalizations, minimum variance matching, and so on.  Provides cumulative
        distances, alignments, specialized plot styles, etc.
  description: DTW is a family of algorithms which compute the local stretch 
        or compression to apply to the time axes of two timeseries in order to optimally 
        map one (query) onto the other (reference). DTW outputs the remaining cumulative 
        distance between the two and, if desired, the mapping itself (warping function). 
        DTW is widely used for classification and clustering tasks, e.g. in 
        bioinformatics, chemometrics, econometrics, and general timeseries mining.
  doc_url: https://dynamictimewarping.github.io/python/
  dev_url: https://github.com/DynamicTimeWarping/dtw-python

extra:
  recipe-maintainers:
    - tonigi
